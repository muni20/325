import Deck from"./deck.js";import openSocket from"socket.io";FBInstant.initializeAsync().then((function(){console.log("loaded")})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelector(".player-one-deck"),r=document.querySelector(".computer-one-deck"),t=document.querySelector(".computer-two-deck"),a=document.querySelector(".player-one-hand"),n=document.querySelector(".computer-one-hand"),s=document.querySelector(".computer-two-hand"),c=document.querySelector(".trump"),d=document.querySelector(".turn-display"),u=document.querySelector(".table-pit"),l=[];let i,o,p,h,f=[{cards:[]}],y=[{cards:[]}],m=[{cards:[]}],k="singlePlayer",D=0;const v=new Deck,T={6:6,7:7,8:8,9:9,10:10,J:11,Q:12,K:13,A:14};let E=!1,g="PlayerOne",b=1,$=[{player:"",Go:1,Deck:[],Turn:!0},{player:"",Go:2,Deck:[],Turn:!1},{player:"",Go:3,Deck:[],Turn:!1}],L=[{player:"",card:{suit:null,value:null}}];function O(c,l,i){let o;e.innerText=$[0].Deck.numberOfCards,c.cards.forEach((e=>{o=document.createElement("div"),o.classList.add("card","&hearts;"===e.suit||"&diams;"===e.suit?"red":"black"),o.dataset.suit=`${e.suit}`,o.dataset.value=`${e.value}`,o.innerHTML=`${e.suit}`,o.dataset.id=`${$[0].player}`,"playerOne"===$[0].player&&o.setAttribute("draggable","true"),a.appendChild(o)})),t.innerHTML=$[1].Deck.numberOfCards,l.cards.forEach((e=>{o=document.createElement("div"),o.classList.add("card","&hearts;"===e.suit||"&diams;"===e.suit?"red":"black"),o.dataset.suit=`${e.suit}`,o.dataset.value=`${e.value}`,o.innerHTML=`${e.suit}`,o.dataset.id=`${$[1].player}`,"playerOne"===$[1].player&&o.setAttribute("draggable","true"),n.appendChild(o)})),r.innerText=$[2].Deck.numberOfCards,i.cards.forEach((e=>{o=document.createElement("div"),o.classList.add("card","&hearts;"===e.suit||"&diams;"===e.suit?"red":"black"),o.dataset.suit=`${e.suit}`,o.dataset.value=`${e.value}`,o.innerHTML=`${e.suit}`,o.dataset.id=`${$[2].player}`,"playerOne"===$[2].player&&o.setAttribute("draggable","true"),s.appendChild(o)})),10===$[0].Deck.numberOfCards&&10===$[1].Deck.numberOfCards&&10===$[2].Deck.numberOfCards&&new Promise(((e,r)=>{10===b?e():r()})).then((()=>{E=!0,console.log("Game Over")})).catch((()=>{!function(){function e(){$[0].Turn&&(h=this)}E||(a.querySelectorAll("[data-id='playerOne']").forEach((r=>r.addEventListener("dragstart",e))),u.addEventListener("dragstart",e),u.addEventListener("dragover",(function(e){e.preventDefault()})),u.addEventListener("dragenter",(function(e){e.preventDefault()})),u.addEventListener("drop",(function(e){1===$.filter((e=>1===e.Go))[0].Go&&(p=h.dataset.suit,this.appendChild(h))})),u.addEventListener("dragend",(function(){})),u.addEventListener("DOMNodeInserted",(e=>{$.filter((e=>!0===e.Turn))[0].player===e.target.dataset.id&&($.filter((e=>1===e.Go)),3!==u.querySelectorAll("div").length?($[0].Turn&&(d.innerText=`Your Turn ${b}`,function(){let e=$[0].Deck.cards.filter((e=>e.suit===h.dataset.suit&&e.value===h.dataset.value));L[0].player="playerOne",L[0].card.suit=e[0].suit,L[0].card.value=e[0].value,$[0].Deck.cards.splice(e,1),console.log(L),$[0].Turn=!1,$[1].Turn=!0}()),$[1].Turn&&(d.innerText=`AI 1 Turn ${b}`,A($[1].player)),$[2].Turn&&(d.innerText=`AI 2 Turn ${b}`,A($[2].player))):b++)})))}()}))}function A(e){"AI1"===e&&(S($[1].Deck),$[1].Turn=!1,$[2].Turn=!0),"AI2"===e&&(S($[2].Deck),$[0].Turn=!0,$[2].Turn=!1,d.innerText=`Your Turn ${b}`)}function S(e){let r;L.forEach((e=>{r=Math.max(T[e.card.value]),e.card.suit})),console.log("hit AIPlayer")}(function(){for(let e=2;e<=6;e++)l.push({suit:"&hearts;",value:`${e}`});for(let e=2;e<=6;e++)l.push({suit:"&spades;",value:`${e}`});for(let e=2;e<=7;e++)l.push({suit:"&diams;",value:`${e}`});for(let e=2;e<=7;e++)l.push({suit:"&clubs;",value:`${e}`})})(),v.removeCards(l),v.shuffle(),function(){if((k="singlePlayer")&&($[0].player="playerOne",$[1].player="AI1",$[2].player="AI2",$[0].Deck=new Deck(v.dispense(0,5)),$[1].Deck=new Deck(v.dispense(0,5)),$[2].Deck=new Deck(v.dispense(0,5)),O($[0].Deck,$[1].Deck,$[2].Deck),a.addEventListener("click",(function(e){!function(e){let r=[];$[0].Deck.cards.forEach((e=>{r.push(e.suit)})),i=[...new Set(r)],o=i.find((r=>r===e)),c.classList.add("&hearts;"===o||"&diams;"===o?"red":"black"),c.innerHTML=o}(e.target.dataset.suit),new Promise(((e,r)=>{void 0!==o?e():r("Error while dispensing more cards")})).then((()=>{v.dispense(0,3).forEach((e=>{$[0].Deck.cards.push(e),f[0].cards.push(e)})),v.dispense(0,3).forEach((e=>{$[1].Deck.cards.push(e),y[0].cards.push(e)})),v.dispense(0,3).forEach((e=>{$[2].Deck.cards.push(e),m[0].cards.push(e)})),O(f[0],y[0],m[0]),f=[{cards:[]}],y=[{cards:[]}],m=[{cards:[]}],v.dispense(0,2).forEach((e=>{$[0].Deck.cards.push(e),f[0].cards.push(e)})),v.dispense(0,2).forEach((e=>{$[1].Deck.cards.push(e),y[0].cards.push(e)})),v.dispense(0,2).forEach((e=>{$[2].Deck.cards.push(e),m[0].cards.push(e)})),O(f[0],y[0],m[0]),f=[{cards:[]}],y=[{cards:[]}],m=[{cards:[]}]})).catch((e=>{console.log(e)}))}),{once:!0})),k="MultiPlayer"){const e=io();e.on("player-number",(e=>{-1===e?infoDisplay.innerHTML="Sorry, all tables are full":(D=parseInt(e),1===D&&(g="enemy"),console.log(D))})),e.on("player-connection",(e=>{console.log(`player number ${e} has connected or disconnected`)}))}}()}));